# Generated by Django 4.2.9 on 2025-02-20 05:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch', models.CharField(help_text='Batch period (e.g., 2022-2024)', max_length=9, unique=True)),
                ('year', models.IntegerField(help_text='Starting year of the batch (e.g., 2022)')),
                ('status', models.BooleanField(default=True, help_text='Indicates if the batch is active')),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('event_photo', models.ImageField(blank=True, null=True, upload_to='event_photo/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['event_name'],
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('level', models.PositiveIntegerField(help_text='Level number (e.g., 1, 2, 3)', validators=[django.core.validators.MinValueValidator(1)])),
                ('maximum_capacity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('team_size', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('total_duration', models.PositiveIntegerField(default=0, verbose_name='Total Duration (minutes)')),
                ('agenda1_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 1 Name')),
                ('agenda1_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 1 Duration (minutes)')),
                ('agenda2_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 2 Name')),
                ('agenda2_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 2 Duration (minutes)')),
                ('agenda3_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 3 Name')),
                ('agenda3_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 3 Duration (minutes)')),
                ('agenda4_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 4 Name')),
                ('agenda4_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 4 Duration (minutes)')),
                ('agenda5_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 5 Name')),
                ('agenda5_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 5 Duration (minutes)')),
                ('agenda6_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 6 Name')),
                ('agenda6_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 6 Duration (minutes)')),
                ('agenda7_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 7 Name')),
                ('agenda7_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 7 Duration (minutes)')),
                ('agenda8_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 8 Name')),
                ('agenda8_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 8 Duration (minutes)')),
                ('agenda9_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 9 Name')),
                ('agenda9_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 9 Duration (minutes)')),
                ('agenda10_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Agenda 10 Name')),
                ('agenda10_duration', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Agenda 10 Duration (minutes)')),
                ('question1', models.TextField(blank=True)),
                ('question1_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 1 Marks')),
                ('question2', models.TextField(blank=True)),
                ('question2_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 2 Marks')),
                ('question3', models.TextField(blank=True)),
                ('question3_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 3 Marks')),
                ('question4', models.TextField(blank=True)),
                ('question4_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 4 Marks')),
                ('question5', models.TextField(blank=True)),
                ('question5_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 5 Marks')),
                ('question6', models.TextField(blank=True)),
                ('question6_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 6 Marks')),
                ('question7', models.TextField(blank=True)),
                ('question7_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 7 Marks')),
                ('question8', models.TextField(blank=True)),
                ('question8_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 8 Marks')),
                ('question9', models.TextField(blank=True)),
                ('question9_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 9 Marks')),
                ('question10', models.TextField(blank=True)),
                ('question10_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 10 Marks')),
                ('question11', models.TextField(blank=True)),
                ('question11_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 11 Marks')),
                ('question12', models.TextField(blank=True)),
                ('question12_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Question 12 Marks')),
                ('first_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='First Place Mark %')),
                ('second_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Second Place Mark %')),
                ('third_mark', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Third Place Mark %')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='home.event')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['event', 'level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venue_name', models.CharField(max_length=100, unique=True)),
                ('venue_capacity', models.PositiveIntegerField(help_text='Maximum capacity of the venue', validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Venue',
                'verbose_name_plural': 'Venues',
                'ordering': ['venue_name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('roll_number', models.CharField(max_length=20, unique=True)),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=50, null=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('mail_id', models.EmailField(max_length=254, unique=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='home.batch')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='home.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=200)),
                ('slot_date', models.DateField()),
                ('slot_starttime', models.TimeField()),
                ('slot_endtime', models.TimeField()),
                ('alloted_staff', models.CharField(max_length=100, verbose_name='Staff Name')),
                ('staff_id', models.CharField(max_length=50, verbose_name='Staff ID')),
                ('remaining_capacity', models.PositiveIntegerField(default=0, help_text='Number of spots still available', validators=[django.core.validators.MinValueValidator(0)])),
                ('filled_capacity', models.PositiveIntegerField(default=0, help_text='Number of spots already filled', validators=[django.core.validators.MinValueValidator(0)])),
                ('slot_status', models.CharField(choices=[('opened', 'Opened'), ('closed', 'Closed')], default='opened', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booked_users', models.ManyToManyField(blank=True, related_name='booked_slots', to='home.userprofile')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='home.event')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='home.levels')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='home.venue')),
            ],
            options={
                'verbose_name': 'Slot',
                'verbose_name_plural': 'Slots',
                'ordering': ['event', 'level', 'slot_date', 'slot_starttime'],
            },
        ),
    ]
